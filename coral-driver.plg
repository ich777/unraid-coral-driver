<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
  <!ENTITY name      "coral-driver">
  <!ENTITY author    "ich777">
  <!ENTITY version   "2023.07.31">
  <!ENTITY md5       "20b21fca573151cdd96d55d50b5f71de">
  <!ENTITY launch    "Settings/coraltpu">
  <!ENTITY gitURL    "https://github.com/&author;/unraid-&name;/raw/master">
  <!ENTITY pluginURL "&gitURL;/&name;.plg">
  <!ENTITY plugin    "/boot/config/plugins/&name;">
  <!ENTITY emhttp    "/usr/local/emhttp/plugins/&name;">
  <!ENTITY packages  "/boot/config/plugins/&name;/packages">
]>

<PLUGIN  name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" min="6.9.0-rc2" support="https://forums.unraid.net/topic/98064-support-blakeblackshear-frigate/">

<CHANGES>

###2023.07.31
- Fixed typos - thank you to GitHub user SNR-Tech-Bytes

###2022.11.14
- Fixed driver doesn't load correctly on some systems

###2022.07.21d
- Fixed temperature readout when using multiple PCI based Coral TPUs

###2022.07.21c
- Fixed download bug
- Added check for wrong named plugin packages

###2022.07.21
- Version detection from package via GitHub API
- Save md5 in packages directory

###2022.07.19
- Bugfix if Kernel module is already available or not
- Cleanup

###2022.07.15
- Overhaul from the Plugin page to display all TPUs installed in the system
- Added message if no PCI based Coral TPUs are found
- Enable/Disable and set Shutdown temperature from settings file for all TPUs
- Necessary changes for unRAID 6.11+

###2022.04.11
- Added Plugin Update Helper when up-/downgrading unRAID version

###2021.10.01
- Improved plugin page to show information for up to 4 installed TPUs
- Set shutdown temperature by default to 104.8C for up to 4 installed TPUs
- Enable shutdown temperature by default for up to 4 installed TPUs

###2021.09.30
- Added plugin page to show information about the connected TPU(s)

###2021.06.23
- Changed package download repo

###2021.03.25
- Added wait for network and timout

###2021.03.24
- Integrated icon into package

###2021.02.19
- Initial release

</CHANGES>

<FILE Run="/bin/bash">
<INLINE>
rm -f $(ls &plugin;/&name;*.txz 2>/dev/null|grep -v '&version;')
</INLINE>
</FILE>

<FILE Name="&plugin;/&name;-&version;.txz" Run="upgradepkg --install-new">
<URL>&gitURL;/packages/&name;-&version;.txz</URL>
<MD5>&md5;</MD5>
</FILE>

<FILE Name="&emhttp;/README.md">
<INLINE>
**Coral Accelerator Module Drivers**

This package contains the Coral Accelerator Module Drivers and installs them to utilize them in your Docker containers.
</INLINE>
</FILE>

<FILE Run="/bin/bash">
<INLINE>

download() {
# Download Coral Accelerator Module Drivers
if wget -q -nc --show-progress --progress=bar:force:noscroll -O "&packages;/${KERNEL_V%%-*}/${LAT_PACKAGE}" "${DL_URL}/${LAT_PACKAGE}" ; then
  wget -q -nc --show-progress --progress=bar:force:noscroll -O "&packages;/${KERNEL_V%%-*}/${LAT_PACKAGE}.md5" "${DL_URL}/${LAT_PACKAGE}.md5"
  if [ "$(md5sum &packages;/${KERNEL_V%%-*}/${LAT_PACKAGE} | awk '{print $1}')" != "$(cat &packages;/${KERNEL_V%%-*}/${LAT_PACKAGE}.md5 | awk '{print $1}')" ]; then
    echo
    echo "---CHECKSUM ERROR!---"
    rm -rf &plugin; &emhttp;
    exit 1
  fi
  echo
  echo "----------Successfully downloaded Coral Accelerator Module Drivers-----------"
else
  echo
  echo "--------------Can't download Coral Accelerator Module Drivers----------------"
  rm -rf &plugin; &emhttp;
  exit 1
fi
}

check() {
if ! ls -1 &packages;/${KERNEL_V%%-*}/ | grep -q "${PACKAGE}" ; then
  LAT_PACKAGE="$(wget -qO- https://api.github.com/repos/ich777/unraid-coral-driver/releases/tags/${KERNEL_V} | jq -r '.assets[].name' | grep "${PACKAGE}" | grep -E -v '\.md5$' | sort -V | tail -1)"
  echo
  echo "---------------Downloading Coral Accelerator Module Drivers!-----------------"
  echo "---------This could take some time, please don't close this window!----------"
  download
else
  echo
  echo "---------------Coral Accelerator Module Drivers found locally----------------"
fi
}

install() {
# Install Coral Accelerator Module Drivers
/sbin/installpkg "&packages;/${KERNEL_V%%-*}/${PACKAGE}*.txz"
depmod -a
}

activate() {
# Modprobe modules
/sbin/modprobe gasket
/sbin/modprobe apex
}

# Define Variables
KERNEL_V="$(uname -r)"
PACKAGE="Coral"
DL_URL="https://github.com/ich777/unraid-coral-driver/releases/download/$KERNEL_V"

if [ ! -d "&packages;/${KERNEL_V%%-*}" ]; then
  mkdir -p "&packages;/${KERNEL_V%%-*}"
fi

#Create settings file if not found
if [ ! -f "&plugin;/settings.cfg" ]; then
  echo 'shutdowntemp0=104800
shutdown_en0=1' > "&plugin;/settings.cfg"
fi

#Check for wrong named plugin packages
if ls &packages;/${KERNEL_V%%-*}/ | grep -q "coral-plugin" ; then
  mv &packages;/${KERNEL_V%%-*}/$(ls &packages;/${KERNEL_V%%-*}/ | grep "coral-plugin") &packages;/${KERNEL_V%%-*}/Coral.txz
  mv &packages;/${KERNEL_V%%-*}/Coral.txz &packages;/${KERNEL_V%%-*}/${PACKAGE}-plugin-${KERNEL_V}-1.txz
fi

#Check for old packages
rm -rf $(ls -d &packages;/* | grep -v "${KERNEL_V%%-*}")

#Check if Coral Accelerator Module Drivers are already downloaded
check

#Check if drivers are available or need to be installed
if ! modinfo apex -0 >/dev/null 2>&amp;1 ; then
  install > /dev/null
fi

#Check if drivers are already loaded
if ! lsmod | grep "apex" >/dev/null 2>&amp;1 ; then
  activate
fi

#Set temperature limits for Coral devices
CORAL_DEVICES="$(find /dev/ -maxdepth 1 -type c -name "apex*" -printf '%f\n' 2>/dev/null)"
SHUTDOWN_TEMP="$(cat /boot/config/plugins/coral-driver/settings.cfg | grep "shutdowntemp0" | cut -d '=' -f2)"
SHUTDOWN_EN="$(cat /boot/config/plugins/coral-driver/settings.cfg | grep "shutdown_en0" | cut -d '=' -f2)"

for device in ${CORAL_DEVICES}; do
  if [ "$(cat /sys$(udevadm info --query=path --name=/dev/${device})/hw_temp_warn2 2>/dev/null)" != "${SHUTDOWN_TEMP}" ]; then
    echo "$SHUTDOWN_TEMP" > /sys$(udevadm info --query=path --name=/dev/${device})/hw_temp_warn2
  fi
  if [ "$(cat /sys$(udevadm info --query=path --name=/dev/${device})/hw_temp_warn2_en 2>/dev/null)" != "${SHUTDOWN_EN}" ]; then
    echo "$SHUTDOWN_EN" > /sys$(udevadm info --query=path --name=/dev/${device})/hw_temp_warn2_en
  fi
done

#Remove icon
if [ -f "&plugin;/&name;.png" ]; then
  rm &plugin;/&name;.png
fi


#Check if Plugin Update Helper is downloaded and up-to-date
if [ ! -f &plugin;/plugin_update_helper ]; then
  wget -q -T 5 -O &plugin;/plugin_update_helper "https://raw.githubusercontent.com/ich777/unraid-plugin_update_helper/master/plugin_update_helper"
else
  CUR_V="$(grep -E "Plugin-Update-Helper version:" &plugin;/plugin_update_helper | awk '{print $4}')"
  if [ ! -s /tmp/update-helper ]; then
    echo "$(wget -T5 -qO- https://raw.githubusercontent.com/ich777/unraid-plugin_update_helper/master/plugin_update_helper | grep -E "Plugin-Update-Helper version:" | awk '{print $4}')" > /tmp/update-helper
    AVAIL_V="$(cat /tmp/update-helper)"
  else
    AVAIL_V="$(cat /tmp/update-helper)"
  fi
  if [ ! -z "$AVAIL_V" ]; then
    COMPARE="$(sort -V &lt;(echo -e "${AVAIL_V}\n$CUR_V") | tail -1)"
    if [ "$CUR_V" != "$COMPARE" ]; then
      wget -q -T 5 -O &plugin;/plugin_update_helper "https://raw.githubusercontent.com/ich777/unraid-plugin_update_helper/master/plugin_update_helper"
    fi
  fi
fi

#Check if Plugin Update Helper is installed and up to date
if [ ! -f /usr/bin/plugin_update_helper ]; then
  cp &plugin;/plugin_update_helper /usr/bin/plugin_update_helper
  chmod +x /usr/bin/plugin_update_helper
else
  PLUGIN_V="$(grep -E "Plugin-Update-Helper version:" &plugin;/plugin_update_helper | awk '{print $4}')"
  INST_V="$(grep -E "Plugin-Update-Helper version:" /usr/bin/plugin_update_helper | awk '{print $4}')"
  COMPARE="$(sort -V &lt;(echo -e "${PLUGIN_V}\n$INST_V") | tail -1)"
  if [ "$INST_V" != "$COMPARE" ]; then
    kill $(ps aux | grep -E "inotifywait -q /boot/changes.txt -e move_self,delete_self" | grep -v "grep -E inotifywait" | awk '{print $2}') 2>/dev/null
    sleep 1
    cp &plugin;/plugin_update_helper /usr/bin/plugin_update_helper
    chmod +x /usr/bin/plugin_update_helper
  fi
fi

#Start Plugin Update Helper
if [ -z "$(ps aux | grep -E "inotifywait -q /boot/changes.txt -e move_self,delete_self" | grep -v "grep -E inotifywait" | awk '{print $2}')" ]; then
  echo "/usr/bin/plugin_update_helper" | at now &gt; /dev/null 2&gt;&amp;1
fi


echo
echo "--------Installation of Coral Accelerator Module Drivers successful----------"
echo

</INLINE>
</FILE>

<FILE Run="/bin/bash" Method="remove">
<INLINE>

echo "---------------------------------------------------"
echo "---Uninstalling Coral Accelerator Module Drivers---"
echo "---------------------------------------------------"
# Remove plugin related files
removepkg &name;-&version;
rm -rf &emhttp;
rm -rf &plugin;
echo
echo "------------------------------------------------------------------------------"
echo "---Coral Accelerator Module Drivers uninstalled, please reboot your server!---"
echo "------------------------------------------------------------------------------"
echo

</INLINE>
</FILE>
</PLUGIN>